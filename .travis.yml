# This script is based on this example:
# https://stackoverflow.com/questions/42731625/travis-ci-failed-because-cannot-accept-license-constrain-layout/42736695#42736695
# See also:
# https://github.com/travis-ci/travis-ci/issues/6122 Android - Missing emulator ABI due to bad SDK Tools version
language: android
jdk: oraclejdk8
sudo: required # false for Container-Based Infrastructure, required for Sudo-enabled Infrastructure
dist: trusty
group: edge  # Add this

env:
  global:
    - COMPILE_API=26
    - EMULATOR_API=24
    - ANDROID_BUILD_TOOLS_VERSION=26.0.3 # Match build-tools version used in build.gradle
    - PROJECT_DIR=${TRAVIS_BUILD_DIR} # Project directory
    - EMULATOR_TAG=google_apis # Google APIs by default, alternatively use default
    - EMULATOR_ABI=armeabi-v7a # ARM ABI v7a by default ( x86 or armeabi-v7a )
    - EMULATOR_SDK_ID="system-images;android-${EMULATOR_API};${EMULATOR_TAG};${EMULATOR_ABI}" # Used to install/create emulator
    - QEMU_AUDIO_DRV=none # Disable emulator audio to avoid warning
    - ADB_INSTALL_TIMEOUT=30 # minutes (2 minutes by default)
    - LONG_LOG_OUTPUT=${TRAVIS_BUILD_DIR}/sdkmanager.log
    - PATH=/usr/local/android-sdk/tools/bin:${PATH}

before_cache:
  - rm -f ${TRAVIS_BUILD_DIR}/gradle/caches/modules-2/modules-2.lock # Avoid to repack it due locks
  - rm -f ${TRAVIS_BUILD_DIR}/gradle/caches/3.3/classAnalysis/classAnalysis.lock
  - rm -f ${TRAVIS_BUILD_DIR}/gradle/caches/3.3/jarSnapshots/jarSnapshots.lock

cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/gradle/caches/
    - ${TRAVIS_BUILD_DIR}/gradle/wrapper/dists/

notifications:
  email: false

before_install:
  - echo 'count=0' > /home/travis/.android/repositories.cfg # Avoid warning
  - ls -la $HOME/**/*

install:
  # List and delete unnecessary components to free space
  - sdkmanager --list || true
  - sdkmanager --uninstall "extras;google;google_play_services"
  # Update sdk tools to latest version and install/update components
  - echo yes | sdkmanager "tools"
  - echo yes | sdkmanager "platforms;android-${EMULATOR_API}" > "${LONG_LOG_OUTPUT}" # Android platform required by emulator
  - echo yes | sdkmanager "platforms;android-${COMPILE_API}" >> "${LONG_LOG_OUTPUT}"
  - echo yes | sdkmanager "platforms;android-27" >> "${LONG_LOG_OUTPUT}"                   # Latest platform required by SDK tools
  - echo yes | sdkmanager "platform-tools" >> "${LONG_LOG_OUTPUT}"
  - echo yes | sdkmanager "build-tools;${ANDROID_BUILD_TOOLS_VERSION}" >> "${LONG_LOG_OUTPUT}"
  - echo yes | sdkmanager "${EMULATOR_SDK_ID}" >> "${LONG_LOG_OUTPUT}" # Install emulator system image
  # Check components status
  - sdkmanager --list || true
  # Create and start emulator, see https://developer.android.com/studio/command-line/avdmanager.html
  - echo no | avdmanager create avd -n test -k "${EMULATOR_SDK_ID}" -f
  - ls -la
  - ls -la $HOME/**/*
  - ls -la /usr/local/android-sdk/
  - which emulator
  # https://developer.android.com/studio/run/emulator-commandline.html
  - emulator -avd test -engine auto -no-snapshot -version -verbose -show-kernel -no-audio -no-window -camera-back none -camera-front none
  # Start adbd, wait for device connected and show android serial
  # https://developer.android.com/studio/command-line/adb.html
  - adb wait-for-device get-serialno
  # Show version and download Gradle Wrapper if it's not already cached
  - cd ${PROJECT_DIR} && ./gradlew --version
  # Clean project and download missing dependencies and components
  - cd ${PROJECT_DIR} && ./gradlew clean build
  # Check components status
  - sdkmanager --list || true

before_script:
  # Wait for emulator fully-booted and disable animations
  - travis_wait 30 android-wait-for-emulator
  - adb shell settings put global window_animation_scale 0 &
  - adb shell settings put global transition_animation_scale 0 &
  - adb shell settings put global animator_duration_scale 0 &
  - sleep 30
  - adb shell input keyevent 82 &
  - adb devices

script:
  - cd ${PROJECT_DIR}
  - |
    ./gradlew build assembleAndroidTest -PtestCoverageEnabled='true'
    retval=$?
    if [ $retval -ne 0 ]; then
      echo "error on assembling, exit code: "$retval
      exit $retval
    fi

  # See http://stackoverflow.com/questions/21294945/error-unable-to-find-instrumentation-info-for-componentinfo
  # Instead of this (which doesn't give any output during tests execution):
  # - ./gradlew connectedCheck -PdisablePreDex --continue --stacktrace --debug
  # run:
  - |
    ./gradlew :app:installDebug :app:installDebugAndroidTest -PtestCoverageEnabled='true'
    retval=$?
    if [ $retval -ne 0 ]; then
      echo "error on install, exit code: "$retval
      exit $retval
    fi

  #
  # The below line causes Process crash due to absence of video device
  #- adb shell am instrument -w -r -e debug false org.andstatus.app.tests/android.test.InstrumentationTestRunner
  #
  # Run only tests, marked with a special annotation:
  # See https://developer.android.com/reference/android/test/InstrumentationTestRunner.html
  # For testing one method only:
  # - adb shell am instrument -w -r -e debug false -e coverage true -e class org.andstatus.app.service.CommandExecutorStrategyTest#testSearch org.andstatus.app.tests/android.support.test.runner.AndroidJUnitRunner
  - |
    adb shell am instrument -w -r -e executionMode travisTest -e coverage true org.andstatus.app.tests/android.support.test.runner.AndroidJUnitRunner |& tee build/adb-test.log
    retval=$?
    if [ $retval -ne 0 ]; then
      echo "error in adb, exit code: "$retval
      exit $retval
    fi

  # adb doesn't propagate exit code from tests, see https://code.google.com/p/android/issues/detail?id=3254
  # So we need to parse saved terminal log
  - |
    cat build/adb-test.log | grep "INSTRUMENTATION_STATUS: stack=" | grep -v "org.junit.AssumptionViolatedException"
    if [ $? -eq 0 ]; then
      echo "Test failure found"
      exit 1
    else
      cat build/adb-test.log | grep "OK ("
    fi

  # Copy coverage data from the emulator
  - adb shell "rm /sdcard/Download/coverage.ec"
  - adb shell "run-as org.andstatus.app cp /data/user/0/org.andstatus.app/files/coverage.ec /sdcard/Download"
  - cd build
  # copy to "build" folder, where it will be found by Sonar scanner
  - adb pull "/sdcard/Download/coverage.ec"
  - cd ..

after_script:
  # Show tests and lint results
#  - cat ${PROJECT_DIR}/*/build/outputs/androidTest-results/connected/*
#  - cat ${PROJECT_DIR}/*/build/reports/lint-results.xml

after_success:
  - ./gradlew sonarqube -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN -Dsonar.verbose=true
