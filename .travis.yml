# Trying Travis config based on https://raw.githubusercontent.com/AllanWang/KAU/dev/.travis.yml
language: android
jdk: oraclejdk8

env:
  global:
  - ANDROID_API=27
  - EMULATOR_API=24
  - ANDROID_BUILD_TOOLS=27.0.3
  - PROJECT_DIR=${TRAVIS_BUILD_DIR}

android:
  components:
  - tools
  - android-$EMULATOR_API
  - platform-tools
  - tools
  - build-tools-$ANDROID_BUILD_TOOLS
  - android-$ANDROID_API
  - extra-android-support
  - extra-android-m2repository
  - extra-google-m2repository
  - sys-img-armeabi-v7a-android-$EMULATOR_API
  licenses:
  - ".+"

cache:
  directories:
  - $HOME/.m2
  - $HOME/.gradle/caches/
  - $HOME/.gradle/wrapper/
  - $HOME/.android/build-cache

notifications:
  email: false

before_install:
- printenv
- yes | sdkmanager "platforms;android-27"

before_script:
- echo "y" | android update sdk -a --no-ui --filter android-$EMULATOR_API
- echo "y" | android update sdk -a --no-ui --filter sys-img-armeabi-v7a-android-$EMULATOR_API
- android list targets | grep -E '^id:' | awk -F '"' '{$1=""; print $2}' # list all targets
- echo no | android create avd --force -n test -t android-$EMULATOR_API --abi armeabi-v7a
- which emulator
- emulator -avd test -version -verbose -no-skin -no-window &
- android-wait-for-emulator
- adb shell input keyevent 82 &

script:
- chmod +x gradlew
- "./gradlew --quiet androidGitVersion"
# Show version and download Gradle Wrapper if it's not already cached
- cd ${PROJECT_DIR} && ./gradlew --version
# Clean project and download missing dependencies and components
- cd ${PROJECT_DIR} && ./gradlew clean build
# Check components status
- sdkmanager --list || true
- cd ${PROJECT_DIR}
- |
  ./gradlew build assembleAndroidTest -PtestCoverageEnabled='true'
  retval=$?
  if [ $retval -ne 0 ]; then
    echo "error on assembling, exit code: "$retval
    exit $retval
  fi

# See http://stackoverflow.com/questions/21294945/error-unable-to-find-instrumentation-info-for-componentinfo
# Instead of this (which doesn't give any output during tests execution):
# - ./gradlew connectedCheck -PdisablePreDex --continue --stacktrace --debug
# run:
- |
  ./gradlew :app:installDebug :app:installDebugAndroidTest -PtestCoverageEnabled='true'
  retval=$?
  if [ $retval -ne 0 ]; then
    echo "error on install, exit code: "$retval
    exit $retval
  fi

#
# The below line causes Process crash due to absence of video device
#- adb shell am instrument -w -r -e debug false org.andstatus.app.tests/android.test.InstrumentationTestRunner
#
# Run only tests, marked with a special annotation:
# See https://developer.android.com/reference/android/test/InstrumentationTestRunner.html
# For testing one method only:
# - adb shell am instrument -w -r -e debug false -e coverage true -e class org.andstatus.app.service.CommandExecutorStrategyTest#testSearch org.andstatus.app.tests/android.support.test.runner.AndroidJUnitRunner
- |
  adb shell am instrument -w -r -e executionMode travisTest -e coverage true org.andstatus.app.tests/android.support.test.runner.AndroidJUnitRunner |& tee build/adb-test.log
  retval=$?
  if [ $retval -ne 0 ]; then
    echo "error in adb, exit code: "$retval
    exit $retval
  fi

# adb doesn't propagate exit code from tests, see https://code.google.com/p/android/issues/detail?id=3254
# So we need to parse saved terminal log
- |
  cat build/adb-test.log | grep "INSTRUMENTATION_STATUS: stack=" | grep -v "org.junit.AssumptionViolatedException"
  if [ $? -eq 0 ]; then
    echo "Test failure found"
    exit 1
  else
    cat build/adb-test.log | grep "OK ("
  fi

# Copy coverage data from the emulator
- adb shell "rm /sdcard/Download/coverage.ec"
- adb shell "run-as org.andstatus.app cp /data/user/0/org.andstatus.app/files/coverage.ec /sdcard/Download"
- cd build
# copy to "build" folder, where it will be found by Sonar scanner
- adb pull "/sdcard/Download/coverage.ec"
- cd ..

after_script:
  # Show tests and lint results
#  - cat ${PROJECT_DIR}/*/build/outputs/androidTest-results/connected/*
#  - cat ${PROJECT_DIR}/*/build/reports/lint-results.xml

after_success:
  - ./gradlew sonarqube -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN -Dsonar.verbose=true
